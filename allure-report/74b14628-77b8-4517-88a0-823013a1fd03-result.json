{"name": "Test to verify that the Set Property Task Actions works as expected during execution", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_task_automation_actions.TestTaskAutomationActions object at 0x7af821f947a0>, user_group_creation = 'Auto_Test_user_group_TestTaskAutomationActions_1457', job_execution_by = 'user'\nusers_list = ['process.publisher.03']\n\n    @allure.title(\"Test to verify that the Set Property Task Actions works as expected during execution\")\n    @allure.description(\n        \"This testcase tests if set property task actions with multi resource added on task gets triggered at \"\n        \"start of the task during job execution\")\n    @allure.link(\"https://app.clickup.com/t/86cupamch\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.set_property_task_action_with_multi_resource_triggered_at_start_of_task\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_set_property_task_action_with_multi_resource_triggered_at_start_of_task(self, user_group_creation,\n                                                                                     job_execution_by, users_list):\n        process_data = self.multi_resource_process.test_add_set_property_action_type_at_start_with_multi_resource()\n        object_data, display_name = object_type_objects.test_create_objects(\n            {process_data[\"properties\"][\"title_display_name\"]: \"Object-01\",\n             process_data[\"properties\"][\"single_line_property\"]: \"single_line\",\n             process_data[\"properties\"][\"multi_line_property\"]: \"multi_line\",\n             process_data[\"properties\"][\"number_property\"]: \"10\",\n             process_data[\"properties\"][\"multi_select_property\"]: [\n                 process_data[\"properties\"][\"multi_select_option_02\"]],\n             process_data[\"properties\"][\"single_select_property\"]: process_data[\"properties\"][\n                 \"single_select_option_02\"],\n             process_data[\"properties\"][\"date_property\"]: \"12-12-2012\",\n             process_data[\"properties\"][\"date_time_property\"]: datetime.now().strftime(\"%d-%m-%Y %H:%M\")},\n            process_data[\"properties\"][\"display_name\"])\n    \n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n    \n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"res_param\"],\n                                       data={\"value\": object_data[\"displayName\"]})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"number_param\"], data={\"value\": \"20\"})\n        # self.job_obj.execute_parameter(task_name_01, process_data[\"should_be_param\"], data={\"value\": \"50\"})\n        self.job_obj.complete_task(task_name_01)\n>       self.job_obj.start_task(task_name_02)\n\ntests/scenarios/job/test_task_automation_actions.py:1958: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:352: in start_task\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, message = ''\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError\n\nutil/validate_response.py:4: AssertionError"}, "description": "This testcase tests if set property task actions with multi resource added on task gets triggered at start of the task during job execution", "parameters": [{"name": "job_execution_by", "value": "'user'"}, {"name": "users_list", "value": "['process.publisher.03']"}], "start": 1733503875290, "stop": 1733503899508, "uuid": "929dd1bc-b645-41a7-9eb2-59b89cda4af0", "historyId": "81c0ef2672ed511cdf5474f5711f0120", "testCaseId": "f558e5ac13a7387e4db478db4ad0a3e3", "fullName": "tests.scenarios.job.test_task_automation_actions.TestTaskAutomationActions#test_set_property_task_action_with_multi_resource_triggered_at_start_of_task", "labels": [{"name": "tag", "value": "set_property_task_action_with_multi_resource_triggered_at_start_of_task"}, {"name": "tag", "value": "job"}, {"name": "tag", "value": "scenario"}, {"name": "parentSuite", "value": "tests.scenarios.job"}, {"name": "suite", "value": "test_task_automation_actions"}, {"name": "subSuite", "value": "TestTaskAutomationActions"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "29333-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.scenarios.job.test_task_automation_actions"}], "links": [{"type": "link", "url": "https://app.clickup.com/t/86cupamch", "name": "https://app.clickup.com/t/86cupamch"}]}