{"name": "Test to verify that any assigned user can complete the job with exception in which solo task lock isenabled", "status": "failed", "statusDetails": {"message": "AssertionError: {\"timestamp\":1733764927,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565587314612609024\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E801\",\"message\":\"You are not assigned to this Job\",\"errorInfo\":null}]}", "trace": "self = <test_solo_task_lock_execution.TestSoloTaskLockExecution object at 0x7b6d60b6d610>, job_execution_by = 'user_group', users_list = [], user_group_creation = 'Auto_Test_user_group_TestSoloTaskLockExecution_1143'\n\n    @allure.title(\"Test to verify that any assigned user can complete the job with exception in which solo task lock is\"\n                  \"enabled\")\n    @allure.description(\"This testcase tests that any assigned user can complete the job with exception in which solo \"\n                        \"task lock is enabled\")\n    @allure.link(\"https://app.clickup.com/t/86cuz94xt\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.solo_task_lock\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"),\n                                                                        Env.get_env_data(\"QA_ADMIN_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_complete_job_with_exception_in_solo_task_lock(self, job_execution_by, users_list, user_group_creation):\n        process_data = self.solo_task_lock_obj.test_add_solo_task_lock()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"image_capture\"], data=None)\n        logout()\n    \n        login(Env.get_env_data(\"QA_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n>       self.job_obj.complete_task(task_name_01, ctwe=True, ctwe_reason=\"Completed with exception\")\n\ntests/scenarios/job/test_solo_task_lock_execution.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:679: in complete_task\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>\nmessage = '{\"timestamp\":1733764927,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565587314612609024\",\"user...\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E801\",\"message\":\"You are not assigned to this Job\",\"errorInfo\":null}]}'\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError: {\"timestamp\":1733764927,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565587314612609024\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E801\",\"message\":\"You are not assigned to this Job\",\"errorInfo\":null}]}\n\nutil/validate_response.py:4: AssertionError"}, "description": "This testcase tests that any assigned user can complete the job with exception in which solo task lock is enabled", "parameters": [{"name": "job_execution_by", "value": "'user_group'"}, {"name": "users_list", "value": "[]"}], "start": 1733764916084, "stop": 1733764927596, "uuid": "433337d1-6ade-4748-ae40-db0078ea0575", "historyId": "66329536c7cd69f94760fb127e17c378", "testCaseId": "71b780e9112d7bee72bd192a9c69a1bc", "fullName": "tests.scenarios.job.test_solo_task_lock_execution.TestSoloTaskLockExecution#test_complete_job_with_exception_in_solo_task_lock", "labels": [{"name": "tag", "value": "solo_task_lock"}, {"name": "tag", "value": "job"}, {"name": "tag", "value": "scenario"}, {"name": "parentSuite", "value": "tests.scenarios.job"}, {"name": "suite", "value": "test_solo_task_lock_execution"}, {"name": "subSuite", "value": "TestSoloTaskLockExecution"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "53959-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.scenarios.job.test_solo_task_lock_execution"}], "links": [{"type": "link", "url": "https://app.clickup.com/t/86cuz94xt", "name": "https://app.clickup.com/t/86cuz94xt"}]}