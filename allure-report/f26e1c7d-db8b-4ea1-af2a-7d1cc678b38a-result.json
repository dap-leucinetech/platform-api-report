{"name": "Test to verify least count in number parameter with linked parameter value and both verification enabled", "status": "failed", "statusDetails": {"message": "AssertionError: {\"timestamp\":1733761770,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565574070279839745\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E465\",\"message\":\"Parameter verification not allowed\",\"errorInfo\":null}]}", "trace": "self = <test_least_count_execution.TestLeastCount object at 0x7b6d60e2c3e0>, user_group_creation = 'Auto_Test_user_group_TestLeastCount_1592', job_execution_by = 'user_group', users_list = []\n\n    @allure.title(\n        \"Test to verify least count in number parameter with linked parameter value and both verification enabled\")\n    @allure.description(\n        \"This testcase tests that user can execute the job with least count in number parameter with linked parameter \"\n        \"value and both verification enabled\")\n    @allure.link(\"https://app.clickup.com/t/86cux44hk\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.least_count\n    @pytest.mark.execute_job_with_least_count_in_number_parameter_with_linked_parameter_value_and_both_verification_enabled\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [\n        (\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_USERNAME_01\")]),\n        (\"user_group\", [])])\n    def test_execute_job_with_least_count_in_number_parameter_with_linked_parameter_value_and_both_verification_enabled(\n            self, user_group_creation, job_execution_by, users_list):\n        process_data = self.least_count_obj.test_add_least_count_to_number_parameter_with_both_verifications_enabled_and_linked_parameter_value()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"number_param1\"], data={\"value\": \"2\"})\n        self.job_obj.verify_self(task_name_01, process_data[\"number_param1\"])\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\")))\n        self.job_obj.accept_self(task_name_01, process_data[\"number_param1\"])\n        self.job_obj.assign_peer(task_name_01, process_data[\"number_param1\"],\n                                 username=[Env.get_env_data(\"QA_ADMIN_USERNAME_01\")],\n                                 job_execution_by=job_execution_by)\n        logout()\n    \n        login(Env.get_env_data(\"QA_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.get_specific_job()\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_ADMIN_PASSWORD_01\")))\n>       self.job_obj.accept_peer(task_name_01, process_data[\"number_param1\"])\n\ntests/scenarios/job/test_least_count_execution.py:588: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:908: in accept_peer\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>\nmessage = '{\"timestamp\":1733761770,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565574070279839745\",\"user...serGroupId\":null,\"type\":\"bad.request\",\"code\":\"E465\",\"message\":\"Parameter verification not allowed\",\"errorInfo\":null}]}'\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError: {\"timestamp\":1733761770,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565574070279839745\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E465\",\"message\":\"Parameter verification not allowed\",\"errorInfo\":null}]}\n\nutil/validate_response.py:4: AssertionError"}, "description": "This testcase tests that user can execute the job with least count in number parameter with linked parameter value and both verification enabled", "parameters": [{"name": "job_execution_by", "value": "'user_group'"}, {"name": "users_list", "value": "[]"}], "start": 1733761758434, "stop": 1733761770893, "uuid": "86915286-fec6-45c3-bb0a-099ee67884b8", "historyId": "677d8477e6d19027034900c4d6bac204", "testCaseId": "58c79d604aaacd0f2aecca868d834993", "fullName": "tests.scenarios.job.test_least_count_execution.TestLeastCount#test_execute_job_with_least_count_in_number_parameter_with_linked_parameter_value_and_both_verification_enabled", "labels": [{"name": "tag", "value": "execute_job_with_least_count_in_number_parameter_with_linked_parameter_value_and_both_verification_enabled"}, {"name": "tag", "value": "least_count"}, {"name": "tag", "value": "job"}, {"name": "tag", "value": "scenario"}, {"name": "parentSuite", "value": "tests.scenarios.job"}, {"name": "suite", "value": "test_least_count_execution"}, {"name": "subSuite", "value": "TestLeastCount"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "53959-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.scenarios.job.test_least_count_execution"}], "links": [{"type": "link", "url": "https://app.clickup.com/t/86cux44hk", "name": "https://app.clickup.com/t/86cux44hk"}]}