{"name": "Test to verify that user can execute job with solo task lock on a task in a prototype with both verification enabled", "status": "failed", "statusDetails": {"message": "AssertionError: {\"timestamp\":1733764951,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565587408053313536\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E801\",\"message\":\"You are not assigned to this Job\",\"errorInfo\":null}]}", "trace": "self = <test_solo_task_lock_execution.TestSoloTaskLockExecution object at 0x7b6d60b6da30>, user_group_creation = 'Auto_Test_user_group_TestSoloTaskLockExecution_1143', job_execution_by = 'user_group', users_list = []\n\n    @allure.title(\n        \"Test to verify that user can execute job with solo task lock on a task in a prototype with both verification \"\n        \"enabled\")\n    @allure.description(\n        \"This testcase tests that user can execute job with solo task lock on a task in a prototype with both \"\n        \"verification enabled\")\n    @allure.link(\"https://app.clickup.com/t/86cuzruf1\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.solo_task_lock\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"),\n                                                                        Env.get_env_data(\"QA_ADMIN_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_execute_job_with_solo_task_lock_on_task_in_prototype_with_both_verification_enabled(self,\n                                                                                                 user_group_creation,\n                                                                                                 job_execution_by,\n                                                                                                 users_list):\n        process_data = self.solo_task_lock_obj.test_add_solo_task_lock_with_both_verification_enabled()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"image_capture\"], data=None)\n        self.job_obj.verify_self(task_name_01, process_data[\"image_capture\"])\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\")))\n        self.job_obj.accept_self(task_name_01, process_data[\"image_capture\"])\n        self.job_obj.assign_peer(task_name_01, process_data[\"image_capture\"], username=users_list,\n                                 job_execution_by=job_execution_by)\n        self.job_obj.assign_peer(task_name_01, process_data[\"image_capture\"],\n                                 username=[Env.get_env_data(\"QA_ADMIN_USERNAME_01\")], job_execution_by=job_execution_by)\n        logout()\n    \n        login(Env.get_env_data(\"QA_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.get_specific_job()\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_ADMIN_PASSWORD_01\")))\n>       self.job_obj.accept_peer(task_name_01, process_data[\"image_capture\"])\n\ntests/scenarios/job/test_solo_task_lock_execution.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:908: in accept_peer\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>\nmessage = '{\"timestamp\":1733764951,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565587408053313536\",\"user...\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E801\",\"message\":\"You are not assigned to this Job\",\"errorInfo\":null}]}'\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError: {\"timestamp\":1733764951,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565587408053313536\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E801\",\"message\":\"You are not assigned to this Job\",\"errorInfo\":null}]}\n\nutil/validate_response.py:4: AssertionError"}, "description": "This testcase tests that user can execute job with solo task lock on a task in a prototype with both verification enabled", "parameters": [{"name": "job_execution_by", "value": "'user_group'"}, {"name": "users_list", "value": "[]"}], "start": 1733764938416, "stop": 1733764951691, "uuid": "738d4a80-7a7d-47d9-9b8a-18964df1527d", "historyId": "d01272985ab279d4ba10d027d2cf46ea", "testCaseId": "a4cc80c92d1d177b78c5f6082cb72143", "fullName": "tests.scenarios.job.test_solo_task_lock_execution.TestSoloTaskLockExecution#test_execute_job_with_solo_task_lock_on_task_in_prototype_with_both_verification_enabled", "labels": [{"name": "tag", "value": "solo_task_lock"}, {"name": "tag", "value": "job"}, {"name": "tag", "value": "scenario"}, {"name": "parentSuite", "value": "tests.scenarios.job"}, {"name": "suite", "value": "test_solo_task_lock_execution"}, {"name": "subSuite", "value": "TestSoloTaskLockExecution"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "53959-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.scenarios.job.test_solo_task_lock_execution"}], "links": [{"type": "link", "url": "https://app.clickup.com/t/86cuzruf1", "name": "https://app.clickup.com/t/86cuzruf1"}]}