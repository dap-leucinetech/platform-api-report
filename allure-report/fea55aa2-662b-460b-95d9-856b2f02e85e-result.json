{"name": "Test to validate activities of published prototype", "status": "failed", "statusDetails": {"message": "AssertionError: owner details not matching\nassert 'created the Prototype' in 'Kajol L (ID:L-facility.admin.03) added the Parameter \"multi_select-1\"  of type \"MULTISELECT\"  to the Task \"Task-1.1\" as Task1.1 of the Stage \"Stage-1\"'\n +  where 'created the Prototype' = const.PROTOTYPE_CREATION_INFO", "trace": "self = <test_prototype_and_parameter.TestPrototypeAndParameter object at 0x757cf72d1160>\n\n    @allure.title(\"Test to validate activities of published prototype\")\n    @allure.description(\"This test case validates view activities details of published prototype\")\n    @allure.link(\"https://app.clickup.com/t/85zu1yaen\")\n    @pytest.mark.scenario1234\n    @pytest.mark.validate_details_of_prototype\n    @pytest.mark.validate_published_prototype_activities_details\n    def test_validate_published_prototype_activities_details(self):\n        login(Env.get_env_data(\"QA_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n    \n        checklist_name_01 = self.test_validate_published_prototype_activities_details.__name__\n        create_new_checklist(checklist_name_01, const.USECASE_ID, const.FACILITY_ID)\n        add_stage(stage_name_01)\n        add_task(stage_name_01, task_name_01)\n    \n        data = [\"sunday\", \"saturday\", \"monday\"]\n        param = get_parameter_data(\"single_select\")\n        add_single_select_dropdown_parameter(stage_name_01, task_name_01, param, data)\n    \n        data = [\"gold\", \"silver\", \"platinum\"]\n        param = get_parameter_data(\"multi_select\")\n        add_multi_select_dropdown_parameter(stage_name_01, task_name_01, param, data)\n    \n        validate_checklist()\n        submit_checklist_for_review()\n        checklist_assignment(\n            [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_USERNAME_02\")])\n        logout()\n    \n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        start_checklist_review()\n        review_comment_ok()\n        logout()\n    \n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_02\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_02\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        start_checklist_review()\n        review_comment_ok()\n        review_submit_back()\n        logout()\n    \n        login(Env.get_env_data(\"QA_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        user = {\"reviewers\": [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")],\n                \"approvers\": [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]}\n        initiate_sign_off(user)\n        sign_off_users()\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_ADMIN_PASSWORD_01\")))\n        sign_off()\n        logout()\n    \n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\")))\n        sign_off()\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\")))\n        sign_off()\n        time.sleep(60)\n        publish_checklist()\n    \n        prototype_details = prototype_activities()\n        publisher_details = prototype_details['data'][0]['details']\n        published_time = prototype_details['data'][0]['triggeredAt']\n        assert const.PROTOTYPE_PUBLISHED_INFO in publisher_details, \"publisher details not matching\"\n    \n        owner_details = prototype_details['data'][1]['details']\n        created_time = prototype_details['data'][1]['triggeredAt']\n>       assert const.PROTOTYPE_CREATION_INFO in owner_details, \"owner details not matching\"\nE       AssertionError: owner details not matching\nE       assert 'created the Prototype' in 'Kajol L (ID:L-facility.admin.03) added the Parameter \"multi_select-1\"  of type \"MULTISELECT\"  to the Task \"Task-1.1\" as Task1.1 of the Stage \"Stage-1\"'\nE        +  where 'created the Prototype' = const.PROTOTYPE_CREATION_INFO\n\ntests/scenarios/test_prototype_and_parameter.py:4784: AssertionError"}, "description": "This test case validates view activities details of published prototype", "start": 1733741781900, "stop": 1733741848215, "uuid": "fe468403-0d67-4a19-90d8-381bda4db0e5", "historyId": "a5fb2427cc9fecc335aa4440991d24ac", "testCaseId": "92069de4e33c234ea0eccc1b0464ebd4", "fullName": "tests.scenarios.test_prototype_and_parameter.TestPrototypeAndParameter#test_validate_published_prototype_activities_details", "labels": [{"name": "tag", "value": "validate_published_prototype_activities_details"}, {"name": "tag", "value": "validate_details_of_prototype"}, {"name": "tag", "value": "scenario1234"}, {"name": "parentSuite", "value": "tests.scenarios"}, {"name": "suite", "value": "test_prototype_and_parameter"}, {"name": "subSuite", "value": "TestPrototypeAndParameter"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "45463-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.scenarios.test_prototype_and_parameter"}], "links": [{"type": "link", "url": "https://app.clickup.com/t/85zu1yaen", "name": "https://app.clickup.com/t/85zu1yaen"}]}