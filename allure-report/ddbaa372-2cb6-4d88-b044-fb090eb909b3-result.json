{"name": "Test to verify that user can execute the job with all parameters and recurrence", "status": "broken", "statusDetails": {"message": "KeyError: 'object_data'", "trace": "self = <test_recurrence_execution.TestRecurrenceExecution object at 0x7b6d60cdaa20>, user_group_creation = 'Auto_Test_user_group_TestRecurrenceExecution_501', job_execution_by = 'user', users_list = ['process.publisher.03']\n\n    @allure.title(\"Test to verify that user can execute the job with all parameters and recurrence\")\n    @allure.description(\"This test is to verify the user can execute the job with all parameters and recurrence\")\n    @allure.link(\"https://app.clickup.com/t/86cvx83e3\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.task_recurrence_execution\n    @pytest.mark.test_job_execution_with_all_parameters_and_recurrence\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_job_execution_with_all_parameters_and_recurrence(self, user_group_creation, job_execution_by, users_list):\n        process_data = self.recurrence_obj.test_adding_all_parameters_and_publish_prototype_with_recurrence()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"image_capture\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"signature_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_select_param\"], data={\"value\": \"monday\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_select_param\"],\n                                       data={\"value\": [\"gold\", \"silver\"]})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"yes_no_param\"], data={\"value\": \"BSE\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"date_param\"], data={\"value\": \"01-12-2023\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"date_time_param\"],\n                                       data={\"value\": \"01-12-2023 13:23\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"file_upload_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"number_param\"], data={\"value\": \"102\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_resource_param\"],\n>                                      data={\"value\": process_data[\"object_data\"][\"displayName\"]})\nE       KeyError: 'object_data'\n\ntests/scenarios/job/test_recurrence_execution.py:574: KeyError"}, "description": "This test is to verify the user can execute the job with all parameters and recurrence", "parameters": [{"name": "job_execution_by", "value": "'user'"}, {"name": "users_list", "value": "['process.publisher.03']"}], "start": 1733763632571, "stop": 1733763656897, "uuid": "b5eedaf2-4951-4de2-9182-2c95457e3fad", "historyId": "d76e2b538d02c6b9425cd5fb467bf0bf", "testCaseId": "627e48bc98c129fccc144bb3e945b031", "fullName": "tests.scenarios.job.test_recurrence_execution.TestRecurrenceExecution#test_job_execution_with_all_parameters_and_recurrence", "labels": [{"name": "tag", "value": "test_job_execution_with_all_parameters_and_recurrence"}, {"name": "tag", "value": "task_recurrence_execution"}, {"name": "tag", "value": "job"}, {"name": "tag", "value": "scenario"}, {"name": "tag", "value": "recurrence"}, {"name": "parentSuite", "value": "tests.scenarios.job"}, {"name": "suite", "value": "test_recurrence_execution"}, {"name": "subSuite", "value": "TestRecurrenceExecution"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "53959-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.scenarios.job.test_recurrence_execution"}], "links": [{"type": "link", "url": "https://app.clickup.com/t/86cvx83e3", "name": "https://app.clickup.com/t/86cvx83e3"}]}