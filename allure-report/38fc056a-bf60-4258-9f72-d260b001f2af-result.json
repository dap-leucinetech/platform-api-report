{"name": "Test to validate error message that the user who didn't start the task should not be able to execute the task with solo task lock", "status": "failed", "statusDetails": {"message": "AssertionError: Task is executed by user who didn't start the task", "trace": "self = <test_solo_task_lock_execution.TestSoloTaskLockExecution object at 0x7af82210b650>, job_execution_by = 'user', users_list = ['process.publisher.03', 'facility.admin.03']\nuser_group_creation = 'Auto_Test_user_group_TestSoloTaskLockExecution_1853'\n\n    @allure.title(\n        \"Test to validate error message that the user who didn't start the task should not be able to execute the task \"\n        \"with solo task lock\")\n    @allure.description(\n        \"This testcase tests that user who didn't start the task should not be able to execute the task with solo task\")\n    @allure.link(\"https://app.clickup.com/t/86cv0hver\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.solo_task_lock\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"),\n                                                                        Env.get_env_data(\"QA_ADMIN_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_validate_user_cannot_execute_task_with_solo_task_lock(self, job_execution_by, users_list,\n                                                                   user_group_creation):\n        process_data = self.solo_task_lock_obj.test_add_solo_task_lock()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        logout()\n    \n        login(Env.get_env_data(\"QA_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.get_specific_job()\n        error_message = self.job_obj.execute_parameter(task_name_01, process_data[\"image_capture\"], data=None,\n                                                       negative_testcase=True)\n        if not error_message.startswith(\"This task is currently in progress and has been locked for solo execution by\"):\n>           raise AssertionError(\"Task is executed by user who didn't start the task\")\nE           AssertionError: Task is executed by user who didn't start the task\n\ntests/scenarios/job/test_solo_task_lock_execution.py:415: AssertionError"}, "description": "This testcase tests that user who didn't start the task should not be able to execute the task with solo task", "parameters": [{"name": "job_execution_by", "value": "'user'"}, {"name": "users_list", "value": "['process.publisher.03', 'facility.admin.03']"}], "start": 1733502546621, "stop": 1733502556396, "uuid": "04586346-1360-46d6-ba48-16e916a2eea3", "historyId": "06186bf658f04581bd4c4321b0bc1209", "testCaseId": "d1b5916bc528aef2e4af9aed4b80f0ba", "fullName": "tests.scenarios.job.test_solo_task_lock_execution.TestSoloTaskLockExecution#test_validate_user_cannot_execute_task_with_solo_task_lock", "labels": [{"name": "tag", "value": "solo_task_lock"}, {"name": "tag", "value": "job"}, {"name": "tag", "value": "scenario"}, {"name": "parentSuite", "value": "tests.scenarios.job"}, {"name": "suite", "value": "test_solo_task_lock_execution"}, {"name": "subSuite", "value": "TestSoloTaskLockExecution"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "29333-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.scenarios.job.test_solo_task_lock_execution"}], "links": [{"type": "link", "url": "https://app.clickup.com/t/86cv0hver", "name": "https://app.clickup.com/t/86cv0hver"}]}